{"version":3,"sources":["assets/sounds/stone.wav","assets/sounds/stone-pick.wav","assets/sounds/CongaSound-4.wav","assets/sounds/JungleMenu.wav","assets/sounds/TeamLogo.wav","assets/sounds/game-success.wav","assets/sounds/fail-sound-effect.wav","assets/img/TeamLogo.svg","assets/img/gameLogo.svg","assets/img/bgvideo.mp4","../node_modules/peerjs/dist sync","actions/types.js","reducers/IntroReducer.js","utils/GameHelpers.js","utils/CheckWin.js","utils/AI.js","utils/countWinMoves.js","reducers/BoardReducer.js","reducers/NetworkReducer.js","reducers/AudioReducer.js","reducers/index.js","history.js","actions/AudioActions.js","actions/IntroActions.js","actions/NetworkActions.js","actions/BoardActions.js","components/MenuButton.js","screens/AboutScreen.js","screens/ConnectionLost.js","screens/DifficultyScreen.js","screens/GameModeScreen.js","components/Avatar.js","components/ChatBox.js","components/TurnBox.js","components/SettingsBox.js","components/SettingsModal.js","components/GameNavbar.js","components/RoomLights.js","components/RoomWalls.js","components/EndModal.js","screens/GameScreen.js","screens/IntroScreen.js","screens/LocalSetupScreen.js","screens/MainScreen.js","components/PeersList.js","components/UsernameInput.js","screens/OnlineSetupScreen.js","screens/SettingsScreen.js","screens/TutorialScreen.js","components/BackgroundVideo.js","components/AudioPlayer.js","Routes.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","INITIAL_STATE","loading","cellCords","CheckWin","pieces","pieceId","piece","find","parseInt","directions","getNeighborMatches","Object","values","some","direction","value","neighbors","location","forEach","p","sameRow","row","sameColumn","column","diagonalValue","rootPiece","comparedPiece","colDiff","rowDif","diff","Math","abs","getDiagonalValue","push","match","reduce","acc","item","details","key","matches","diagonal_up","diagonal_down","selectedPieceId","level","a","Promise","reject","gameState","lastPieceID","isUserTurn","isUserPerspective","difficulty","config","generateMoves","makeMove","unmakeMove","evaluate","evaluateTerminal","negamax","negamaxAlphaBeta","depth","getDepth","result","search","bestMove","leftCount","filter","length","possibleMoves","DeepEqual","avaliablePieces","move","winMovesCount","neighborMatches","sum","countWinMoves","didWin","boardIsFull","every","Infinity","i","binaryStr","toString","binaryVal","repeat","light","tall","round","pitted","owned","getInitialPieces","isOnlineMode","isSingleMode","mounted","pieceObjects","obj","loc","isGameOver","difficultyLevel","isTie","score","playerOne","playerTwo","roundCount","roomId","peer","messages","peerId","remotePeerId","onlineUsers","isInvited","inviteSent","inviteStatus","messageInput","musicOn","musicVolume","soundVolume","musicUrl","playingSound","soundOn","soundUrl","combineReducers","intro","state","type","payload","prop","board","newPieceObjects","pieceIdx","findIndex","newPieces","playAgain","scoreWon","newRoundCount","network","newMessages","createdBy","createdOn","moment","utc","content","data","audio","stonePickSound","stoneSound","newMusicOn","newSoundOn","createHashHistory","stopMusic","dispatch","getState","updateAudioData","updateData","updateIntroData","resetNetwork","updateNetworkData","sendNetworkData","console","log","conn","connect","on","send","listenNetworkData","getPeersList","alert","destroy","history","updateBoardData","launchMultiplayer","selectBagPiece","selectBoardCell","initPeer","userId","Peer","host","port","debug","listAllPeers","list","user","endGame","updatePieceObject","checkBoardWin","hasWon","isMultiplayer","isWin","successSound","loseSound","playGameEndSound","isRemote","t1","performance","now","startMinimax","then","catch","err","t2","position","cellId","cell","cords","idx","x","y","z","getCellPosition","MenuButton","Component","render","this","props","onClick","title","back","playButtonSound","hide","btnTitle","Container","className","goBack","Icon","name","CongaSound","AboutScreen","Grid","stretched","padded","centered","GridColumn","verticalAlign","mobile","tablet","computer","textAlign","ConnectionLost","handleClick","route","handleExit","columns","GridRow","Segment","Dimmer","active","Loader","Button","size","color","DifficultyScreen","GameModeScreen","RandomAvatar","seed","svg","Avatars","sprites","base64","width","create","Image","alt","avatar","src","ChatBox","handleMessageInput","target","handleMessageSend","sendMessage","renderMessages","map","m","Feed","Event","Label","Content","Summary","User","Date","local","fromNow","Extra","text","Modal","trigger","children","Header","scrolling","Description","Actions","Input","action","fluid","placeholder","onChange","icon","labelPosition","bind","message","_id","TurnBox","getTurnLabel","playerName","opponentName","plural","current","iconName","setVolume","Group","class","raised","as","dividing","min","max","SettingsModal","GameNavbar","handleItemClick","setState","activeItem","Menu","style","margin","inverted","Item","RoomLights","renderLights","d1","d2","d3","p1","p2","p3","intensity","Vector3","mapSize","useBlurExponentialShadowMap","blurKernel","shadowCasters","Up","baseUrl","process","RoomWalls","renderWalls","rotation","PI","wall","r1","r2","r3","sceneFilename","rootUrl","EndModal","open","basic","GameScreen","componentWillMount","initBoard","handleOnlineChange","hasValidTurn","handlePieceClick","handleCellClick","isUsedLocation","meshPicked","mesh","_absolutePosition","cellIdx","floor","includes","onSceneMount","scene","getEngine","displayLoadingUI","setTimeout","hideLoadingUI","canvasId","adaptToDeviceRatio","antialias","onMeshPicked","radius","setPosition","upperRadiusLimit","lowerRadiusLimit","panningSensibility","lowerAlphaLimit","upperAlphaLimit","lowerBetaLimit","upperBetaLimit","Zero","minZ","scaling","renderGround","renderPieces","subdivisions","renderCells","pieceScaling","cord","meshNames","hasPieceBeenPicked","IntroScreen","stopIntro","stopIntroLoading","componentDidMount","playIntroSound","tabIndex","onKeyDown","TeamLogo","IntroMusic","LocalSetupScreen","handleInputChange","playerNum","Divider","MainScreen","playMenuSound","GameLogo","MenuMusic","PeersList","connectToPeer","displayPeersListItems","peersList","List","floated","Subheader","selection","preventDefault","test","OnlineSetupScreen","refreshList","constructor","super","handleConfirm","handleCancel","Message","Confirm","cancelButton","confirmButton","onConfirm","onCancel","SettingsScreen","TutorialScreen","BackgroundVideo","jungleMainMenu","autoPlay","muted","loop","AudioPlayer","volume","height","playing","url","onEnded","Routes","path","component","exact","Boolean","window","hostname","store","createStore","reducers","composeWithDevTools","applyMiddleware","ReduxThunk","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba737546.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stone.1e884880.wav\";","module.exports = __webpack_public_path__ + \"static/media/stone-pick.d9b26606.wav\";","module.exports = __webpack_public_path__ + \"static/media/CongaSound-4.0be119fc.wav\";","module.exports = __webpack_public_path__ + \"static/media/JungleMenu.15246aca.wav\";","module.exports = __webpack_public_path__ + \"static/media/TeamLogo.11261b0d.wav\";","module.exports = __webpack_public_path__ + \"static/media/game-success.4f990a22.wav\";","module.exports = __webpack_public_path__ + \"static/media/fail-sound-effect.e734977d.wav\";","module.exports = __webpack_public_path__ + \"static/media/TeamLogo.a7a0ba22.svg\";","module.exports = __webpack_public_path__ + \"static/media/gameLogo.e07aa85e.svg\";","module.exports = __webpack_public_path__ + \"static/media/bgvideo.45731a0f.mp4\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 373;","/* Types\r\n * Constant types used to sync actions with their reducers\r\n */\r\n\r\n// Audio\r\nexport const AUDIO_UPDATE_DATA = 'AUDIO_UPDATE_DATA';\r\nexport const AUDIO_PLAY_MENU_SOUND = 'AUDIO_PLAY_MENU_SOUND';\r\nexport const AUDIO_PLAY_SOUND = 'audio_play_sound';\r\nexport const AUDIO_MOVE_PIECE = 'AUDIO_MOVE_PIECE';\r\nexport const AUDIO_MUTE_SOUND = 'AUDIO_MUTE_SOUND';\r\nexport const AUDIO_MUTE_MUSIC = 'AUDIO_MUTE_MUSIC';\r\n\r\n// Board\r\nexport const BOARD_INIT = 'board_init';\r\nexport const BOARD_PICK_PIECE = 'board_pick_piece';\r\nexport const BOARD_PLACE_PIECE = 'board_place_piece';\r\nexport const BOARD_UPDATE_DATA = 'board_update_data';\r\nexport const BOARD_RESET_GAME = 'board_reset_game'\r\nexport const BOARD_UPDATE_PIECE_OBJECT = 'board_update_piece_object';\r\n\r\n// Intro\r\nexport const INTRO_UPDATE_DATA = 'intro_update_data';\r\n\r\n\r\n// Network\r\nexport const NETWORK_UPDATE_DATA = 'chat_update_data';\r\nexport const NETWORK_RECEIVE_MESSSAGE = 'network_receive_messsage';\r\nexport const NETWORK_RECEIVE_DATA = 'network_receive_data';\r\nexport const NETWORK_RESET_DATA = 'NETWORK_RESET_DATA';","import { INTRO_UPDATE_DATA } from \"../actions/types\";\r\n\r\nconst INITIAL_STATE = {\r\n    loading: true\r\n}\r\n\r\nexport default (state = INITIAL_STATE, { type, payload }) => {\r\n    switch (type) {\r\n        \r\n        case INTRO_UPDATE_DATA:\r\n            return { ...state, [payload.prop]: payload.value };\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n","\r\nexport function getInitialPieces () {\r\n    let pieces = [];\r\n\r\n    for (let i = 0; i < 16; i++) {\r\n\r\n        // Convert to binary and add leading zeros\r\n        const binaryStr = i.toString(2);\r\n        const leadingZeros = \"0\".repeat(4 - binaryStr.length);\r\n        const binaryVal = leadingZeros + binaryStr;\r\n        \r\n        // Build current piece\r\n        const piece = {\r\n            id: i,\r\n            details: {\r\n                light: parseInt(binaryVal[0]),\r\n                tall: parseInt(binaryVal[1]),\r\n                round: parseInt(binaryVal[2]),\r\n                pitted: parseInt(binaryVal[3]),\r\n            },\r\n            owned: false,\r\n            location: null\r\n        };\r\n        \r\n        // Add to pieces list\r\n        pieces.push(piece);\r\n    }\r\n\r\n    return pieces;\r\n}\r\n\r\n\r\nexport const pieceObjects = [\r\n    { id: 0,    obj: 'shortDarkFlatSquare',      loc: [-12.5, 0.15, 13]}, \r\n    { id: 1,    obj: 'shortDarkHoleSquare',      loc: [-9, 0.15, 13]}, \r\n    { id: 2,    obj: 'shortDarkFlatCylinder',    loc: [-5.5, 0.15, 13]}, \r\n    { id: 3,    obj: 'shortDarkHoleCylinder',    loc: [-2, 0.15, 13]},\r\n    { id: 4,    obj: 'tallDarkFlatSquare',       loc: [2, 0.15, 13]}, \r\n    { id: 5,    obj: 'tallDarkHoleSquare',       loc: [5.5, 0.15, 13]}, \r\n    { id: 6,    obj: 'tallDarkFlatCylinder',     loc: [9, 0.15, 13]}, \r\n    { id: 7,    obj: 'tallDarkHoleCylinder',     loc: [12.5, 0.15, 13]},\r\n    { id: 8,    obj: 'shortLightFlatSquare',     loc: [-12.5, 0.15, 17]}, \r\n    { id: 9,    obj: 'shortLightHoleSquare',     loc: [-9, 0.15, 17]}, \r\n    { id: 10,   obj: 'shortLightFlatCylinder',   loc: [-5.5, 0.15, 17]}, \r\n    { id: 11,   obj: 'shortLightHoleCylinder',   loc: [-2, 0.15, 17]},\r\n    { id: 12,   obj: 'tallLightFlatSquare',      loc: [2, 0.15, 17]}, \r\n    { id: 13,   obj: 'tallLightHoleSquare',      loc: [5.5, 0.15, 17]}, \r\n    { id: 14,   obj: 'tallLightFlatCylinder',    loc: [9, 0.15, 17]}, \r\n    { id: 15,   obj: 'tallLightHoleCylinder',    loc: [12.5, 0.15, 17]},\r\n];\r\n\r\nexport const cellCords = [\r\n    [-7.5, 0.15, -7.5], [-7.5, 0.15, -2.5], [-7.5, 0.15, 2.5], [-7.5, 0.15, 7.5],\r\n    [-2.5, 0.15, -7.5], [-2.5, 0.15, -2.5], [-2.5, 0.15, 2.5], [-2.5, 0.15, 7.5],\r\n    [2.5, 0.15, -7.5], [2.5, 0.15, -2.5], [2.5, 0.15, 2.5], [2.5, 0.15, 7.5],\r\n    [7.5, 0.15, -7.5], [7.5, 0.15, -2.5], [7.5, 0.15, 2.5], [7.5, 0.15, 7.5]\r\n];\r\n\r\nexport function getCellPosition(row, column) {\r\n    const cellId = column + (row * 4);\r\n    const cell = cellCords.find((cords, idx) => idx === cellId);\r\n    const [x, y, z] = cell;\r\n    return {x, y, z};\r\n}","function CheckWin (pieces, pieceId) {\r\n\r\n    // Find piece, exit otherwise\r\n    const piece = pieces.find(({ id }) => id === parseInt(pieceId));\r\n    if (!piece) return;\r\n\r\n    // Get located pieces with same row OR column\r\n    const directions = getNeighborMatches(pieces, piece);\r\n\r\n    // Check if some value in some direction totally matched\r\n    const hasWon = Object.values(directions).some(direction => {\r\n        return Object.values(direction).some(value => value >= 3);   \r\n    });\r\n\r\n    return hasWon;\r\n}\r\n\r\nfunction getNeighborMatches(pieces, piece) {\r\n    var neighbors = [];\r\n\r\n    // Not matches if is not placed\r\n    if (!piece.location) return 0;\r\n\r\n    pieces.forEach((p) => {\r\n        if (!p.location || p.id === piece.id) return false;\r\n        const sameRow = p.location.row === piece.location.row;\r\n        const sameColumn = p.location.column === piece.location.column;\r\n        const diagonalValue = getDiagonalValue(piece, p);\r\n\r\n        if (sameRow) neighbors.push({ ...p, match: 'row' });\r\n        if (sameColumn) neighbors.push({ ...p, match: 'column' });\r\n        if (diagonalValue === 1) {\r\n            neighbors.push({ ...p, match: 'diagonal_up' });\r\n        }\r\n        if (diagonalValue === -1) {\r\n            neighbors.push({ ...p, match: 'diagonal_down' });\r\n        }\r\n    });\r\n\r\n    // Accumulate similarities per direction\r\n    const directions = neighbors.reduce((acc, item) => {\r\n        // For each characteristic\r\n        Object.keys(item.details).forEach((key) => {\r\n            // Sum its boolean value to the matched row or column\r\n            const matches = item.details[key] === piece.details[key];\r\n            acc[item.match][key] = (acc[item.match][key] || 0) + matches;\r\n        });\r\n        return acc;\r\n    }, { row: {}, column: {}, diagonal_up: {}, diagonal_down: {} });\r\n    \r\n    return directions;\r\n}\r\n\r\n// Gets the diagonal type (+, -)\r\nfunction getDiagonalValue (rootPiece, comparedPiece) {\r\n    const colDiff = comparedPiece.location.column - rootPiece.location.column;\r\n    const rowDif = comparedPiece.location.row - rootPiece.location.row;\r\n    const diff = Math.abs(colDiff) !== Math.abs(rowDif);\r\n    if (rowDif === 0 || diff ) return 0;\r\n    return colDiff/rowDif;\r\n};\r\n\r\n\r\nexport {\r\n    CheckWin, getNeighborMatches\r\n};","import {CheckWin} from '../utils';\r\nimport DeepEqual from 'deep-equal';\r\nimport negamaxAlphaBeta from 'negamax-alpha-beta';\r\nimport { countWinMoves } from './countWinMoves';\r\n\r\n\r\nasync function startMinimax(pieces, selectedPieceId, level) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        var gameState =  {\r\n            pieces: [],\r\n            selectedPieceId,\r\n            lastPieceID: '',\r\n            isUserTurn: false,\r\n            isUserPerspective: true,\r\n            difficulty: level,\r\n        }\r\n\r\n        for (const piece of pieces) {\r\n            gameState.pieces.push({...piece})\r\n        }\r\n\r\n        let config = {\r\n            generateMoves,\r\n            makeMove,\r\n            unmakeMove,\r\n            evaluate,\r\n            evaluateTerminal\r\n          };\r\n\r\n          let negamax = new negamaxAlphaBeta(config);\r\n          const depth = getDepth(gameState.pieces);\r\n          let result = negamax.search(gameState, depth);\r\n         // console.log('result', result);\r\n          resolve({\r\n            location: result.bestMove.location,\r\n            pieceId: result.bestMove.pieceId\r\n        });\r\n    \r\n    });\r\n}\r\n\r\nfunction getDepth(pieces, level) {\r\n    const leftCount = pieces.filter(p => !p.location).length;\r\n    if (level === 0){\r\n        if (leftCount > 14){\r\n            return 1;\r\n        }\r\n        return 2;\r\n    }else{\r\n        if (leftCount > 14) return 1;\r\n        if (leftCount > 11) return 2;\r\n        if (leftCount > 7) return 4;\r\n        if (leftCount > 1) return 6;\r\n        const turn = pieces.length - leftCount\r\n        return turn - 2;\r\n    }\r\n}\r\n\r\n\r\n/* \r\nYour generateMoves function must take a gameState object and\r\n return an array of all legal moves for that game state. \r\nYou can represent the moves however \r\nyou see fit: integers, objects, strings, etc.\r\n */\r\nfunction generateMoves(gameState) {\r\n    const { pieces, selectedPieceId } = gameState;\r\n    let possibleMoves = [];\r\n    gameState.isUserPerspective = !gameState.isUserPerspective;\r\n    gameState.isUserTurn = gameState.isUserPerspective;\r\n\r\n    // For each possible board cell location\r\n    for (let row = 0; row < 4; row++) {\r\n        for (let column = 0; column < 4; column++) {\r\n            const isUsed = pieces.some((piece) => {\r\n                return DeepEqual(piece.location, {row, column});\r\n            });\r\n            if (!isUsed) {\r\n                // Try with all available pieces\r\n                const avaliablePieces = pieces.filter(p => {\r\n                    return !p.location && p.id !== parseInt(selectedPieceId)\r\n                });\r\n                for (let piece of avaliablePieces) {\r\n                    const move = {\r\n                        selectedPieceId: selectedPieceId,\r\n                        pieceId: piece.id, \r\n                        location: { row, column }\r\n                    }\r\n                    possibleMoves.push(move);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return possibleMoves;\r\n}\r\n\r\n/* \r\nYour makeMove function must take a gameState object and a move object, \r\nperform the move upon the gameState, altering it in place, and return a \r\nboolean value that represents whether or not the side-to-move has \r\nchanged after having performed the move.\r\n */\r\nfunction makeMove(gameState, move) {\r\n    const { pieceId, location, selectedPieceId } = move;\r\n    gameState.isUserTurn = !gameState.isUserTurn;\r\n\r\n    const updatedPiece = gameState.pieces.find((piece) => {\r\n        if (piece.id === parseInt(selectedPieceId)) {\r\n            piece.location = location;\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    if (updatedPiece){\r\n        gameState.lastPieceID = selectedPieceId;\r\n        gameState.selectedPieceId = pieceId;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/* \r\nYour unmakeMove function must take a gameState object and a move object, \r\nun-perform the move upon the gameState, altering it in place. \r\nThis must end up producing the exact same gameState as before having called makeMove.\r\n */\r\nfunction unmakeMove (gameState, move) {\r\n    const { selectedPieceId } = move;\r\n    gameState.isUserTurn = !gameState.isUserTurn;\r\n\r\n    const updatedPiece = gameState.pieces.find((piece) => {\r\n        if (piece.id === parseInt(gameState.lastPieceID)) {\r\n            piece.location = null;\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n\r\n    if (updatedPiece) {\r\n        gameState.lastPieceID = '';\r\n        gameState.selectedPieceId = selectedPieceId;\r\n    }\r\n}\r\n\r\n/*\r\nTake a gameState object and return a numeric value representing the score of the gameState \r\nfrom the perspective of the gameState's current player-to-move. Higher numbers mean the \r\ngameState is better for the current player-to-move.\r\n*/\r\nfunction evaluate(gameState){\r\n    let result = 0;\r\n    const { isUserTurn, pieces, isUserPerspective, difficulty } = gameState;\r\n\r\n    result = countWinMoves(pieces);\r\n    if (result) {\r\n       // console.log('evaluating....');\r\n       // console.log(gameState, result);\r\n    }\r\n    if (difficulty === 0){\r\n    result *= ((isUserTurn && isUserPerspective)?1:-1);\r\n    }else{\r\n    result *= ((isUserTurn && isUserPerspective)?-1:-1);\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction evaluateTerminal(gameState){\r\n    let result = null;\r\n    const {isUserTurn, pieces, lastPieceID, isUserPerspective} = gameState;\r\n    const didWin = CheckWin(pieces, lastPieceID);\r\n    const boardIsFull = pieces.every(piece => !!piece.location);\r\n\r\n    if (didWin) {\r\n        result = Infinity * ((isUserTurn && isUserPerspective)?1:-1);\r\n    }\r\n    else if (boardIsFull) {\r\n        result = 0;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n\r\nexport {startMinimax};","import { getNeighborMatches } from './CheckWin';\r\n\r\n\r\nfunction countWinMoves(pieces) {\r\n    let winMovesCount = 0;\r\n\r\n    for (const piece of pieces) {\r\n\r\n        if (piece.location) {\r\n            const neighborMatches = getNeighborMatches(pieces, piece);\r\n            // Sum all the matches of piece directions\r\n            const matchCount = Object.values(neighborMatches).reduce((acc, direction) => {\r\n                // Get the max matched details on direction\r\n                let sum = 0;\r\n                Object.values(direction).forEach(value => {\r\n                    sum += value;\r\n                })\r\n                return acc + sum;\r\n            }, 0);\r\n            winMovesCount += matchCount;\r\n        }\r\n\r\n    }\r\n\r\n    return winMovesCount;\r\n}\r\n\r\nexport { countWinMoves };","import { BOARD_PICK_PIECE, BOARD_PLACE_PIECE, BOARD_RESET_GAME, BOARD_UPDATE_DATA, BOARD_UPDATE_PIECE_OBJECT } from \"../actions/types\";\r\nimport { cellCords, getInitialPieces, pieceObjects } from '../utils';\r\n\r\n\r\nconst INITIAL_STATE = {\r\n    isUserTurn: true,\r\n    pieces: getInitialPieces(),\r\n    selectedPieceId: '',\r\n    isOnlineMode: false,\r\n    isSingleMode: true,\r\n    mounted: false,\r\n    cellCords: cellCords,\r\n    pieceObjects: pieceObjects,\r\n    isGameOver: false,\r\n    difficultyLevel: 0,\r\n    isTie: false,\r\n    score: 0,\r\n    playerOne: '',\r\n    playerTwo: '',\r\n    roundCount: 0,\r\n    roomId: 1,\r\n}\r\n\r\nexport default (state = INITIAL_STATE, { type, payload }) => {\r\n    switch (type) {\r\n        \r\n        case BOARD_UPDATE_DATA:\r\n            return { ...state, [payload.prop]: payload.value };\r\n\r\n        case BOARD_UPDATE_PIECE_OBJECT: {\r\n            let newPieceObjects = [ ...state.pieceObjects ];\r\n\r\n            // Find piece index, exit otherwise\r\n            let pieceIdx = newPieceObjects.findIndex(p => p.id === parseInt(payload.id));\r\n            if (pieceIdx < 0) return state;\r\n\r\n            // Modify piece properties\r\n            newPieceObjects[pieceIdx] = {\r\n                ...newPieceObjects[pieceIdx],\r\n                [payload.prop]: payload.value\r\n            };\r\n\r\n            return { ...state, pieceObjects: newPieceObjects };\r\n        }\r\n\r\n        case BOARD_PICK_PIECE: {\r\n                //console.log(\"userTurn: \", !state.isUserTurn);\r\n            return {\r\n                ...state,\r\n                selectedPieceId: payload.selectedPieceId,\r\n                isUserTurn: !state.isUserTurn\r\n            };\r\n\r\n        }\r\n        \r\n        case BOARD_PLACE_PIECE: {\r\n\r\n            let newPieces = [ ...state.pieces ];\r\n\r\n            // Find piece index, exit otherwise\r\n            let pieceIdx = newPieces.findIndex(p => p.id === parseInt(payload.pieceId));\r\n            if (pieceIdx < 0) return state;\r\n\r\n            // Modify piece properties\r\n            newPieces[pieceIdx] = {\r\n                ...newPieces[pieceIdx],\r\n                owned: state.isUserTurn,\r\n                location: payload.location\r\n            };\r\n\r\n            return { \r\n                ...state, \r\n                pieces: newPieces, \r\n                selectedPieceId: '',\r\n            };\r\n        }\r\n\r\n        case BOARD_RESET_GAME: {\r\n\r\n            // If the game continues, preserve settings\r\n            if (payload && payload.playAgain) {\r\n                const scoreWon = state.isUserTurn ? state.pieces.filter(p=>!p.location).length : 0;\r\n                const newRoundCount = state.roundCount + 1;\r\n                return {\r\n                    ...INITIAL_STATE,\r\n                    isOnlineMode: state.isOnlineMode,\r\n                    isSingleMode: state.isSingleMode,\r\n                    score: state.score += scoreWon,\r\n                    playerOne: state.playerOne,\r\n                    playerTwo: state.playerTwo,\r\n                    roundCount: newRoundCount,\r\n                    roomId: (newRoundCount%2)+1,\r\n                }\r\n            }\r\n\r\n            // Otherwise wipe out everything\r\n            return {\r\n                ...INITIAL_STATE\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n","import { NETWORK_RECEIVE_MESSSAGE, NETWORK_UPDATE_DATA, NETWORK_RESET_DATA } from \"../actions/types\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst INITIAL_STATE = {\r\n    peer: null,\r\n    messages: [],\r\n    peerId: '',\r\n    remotePeerId: '',\r\n    onlineUsers: [],\r\n    isInvited: false,\r\n    inviteSent: false,\r\n    inviteStatus: 'pending',\r\n    messageInput: '',\r\n}\r\n\r\nexport default (state = INITIAL_STATE, { type, payload }) => {\r\n    switch (type) {\r\n        \r\n        case NETWORK_UPDATE_DATA:\r\n            return { ...state, [payload.prop]: payload.value };\r\n\r\n        case NETWORK_RECEIVE_MESSSAGE:\r\n\r\n            const newMessages = [{\r\n                createdBy: payload.peerId,\r\n                createdOn: moment().utc(),\r\n                content: payload.data,\r\n            }, ...state.messages];\r\n\r\n            return {\r\n                ...state,\r\n                messages: newMessages\r\n            };\r\n\r\n        case NETWORK_RESET_DATA: {\r\n            return {\r\n                ...INITIAL_STATE,\r\n                peer: state.peer,\r\n                peerId: state.peerId,\r\n            };\r\n        }\r\n        \r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n","import { AUDIO_UPDATE_DATA, AUDIO_MUTE_SOUND, AUDIO_MUTE_MUSIC, BOARD_PLACE_PIECE, BOARD_PICK_PIECE, BOARD_RESET_GAME, AUDIO_PLAY_SOUND } from \"../actions/types\";\r\nimport stoneSound from '../assets/sounds/stone.wav';\r\nimport stonePickSound from '../assets/sounds/stone-pick.wav';\r\n\r\n\r\nconst INITIAL_STATE = {\r\n    musicOn: true,\r\n    musicVolume: 100,\r\n    soundVolume: 100,\r\n    musicUrl: null,\r\n    playingSound: false,\r\n    soundOn: true,\r\n    soundUrl: null,\r\n}\r\n\r\nexport default (state = INITIAL_STATE, { type, payload }) => {\r\n    switch (type) {\r\n\r\n        case AUDIO_UPDATE_DATA: {\r\n            return { ...state, [payload.prop]: payload.value };\r\n        }\r\n\r\n        case AUDIO_PLAY_SOUND: {\r\n            return { ...state,  \r\n                soundUrl: payload, \r\n                playingSound: true ,\r\n            };\r\n        }\r\n\r\n        case BOARD_PICK_PIECE: {\r\n            return { ...state,  soundUrl: stonePickSound, playingSound: true };\r\n        }\r\n\r\n        case BOARD_PLACE_PIECE: {\r\n            return { ...state,  soundUrl: stoneSound, playingSound: true };\r\n        }\r\n        \r\n        case AUDIO_MUTE_MUSIC:\r\n            let newMusicOn = !state.musicOn;\r\n            return { ...state, musicOn: newMusicOn };\r\n\r\n        case AUDIO_MUTE_SOUND:\r\n            let newSoundOn = !state.soundOn;\r\n            return { ...state, soundOn: newSoundOn };\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n","/*  Reducers\r\n *  These listen actions and handle changes to the \r\n *  appropiate part of the state\r\n */ \r\nimport { combineReducers } from 'redux';\r\nimport IntroReducer from './IntroReducer';\r\nimport BoardReducer from './BoardReducer';\r\nimport NetworkReducer from './NetworkReducer';\r\nimport AudioReducer from './AudioReducer';\r\n\r\nexport default combineReducers({\r\n    intro: IntroReducer,\r\n    board: BoardReducer,\r\n    network: NetworkReducer,\r\n    audio: AudioReducer,\r\n});","import { createHashHistory } from 'history';\r\n\r\nexport default createHashHistory();","import CongaSound from '../assets/sounds/CongaSound-4.wav';\r\nimport MenuMusic from '../assets/sounds/JungleMenu.wav';\r\nimport IntroMusic from '../assets/sounds/TeamLogo.wav';\r\nimport successSound from '../assets/sounds/game-success.wav';\r\nimport loseSound from '../assets/sounds/fail-sound-effect.wav';\r\nimport { AUDIO_MOVE_PIECE, AUDIO_UPDATE_DATA, AUDIO_PLAY_SOUND } from './types';\r\n\r\n\r\nexport const stopMusic = () => {\r\n    return (dispatch, getState) => {\r\n        const { soundOn } = getState().audio;\r\n        if(soundOn)\r\n        {\r\n            dispatch(updateAudioData('musicUrl', null));\r\n        }\r\n    }\r\n};\r\n\r\nexport const playGameEndSound = (isWin = true) => ({\r\n    type: AUDIO_PLAY_SOUND,\r\n    payload: isWin ? successSound : loseSound\r\n})\r\n\r\nexport const playMenuSound = () => {\r\n    \r\n    return (dispatch, getState) => {\r\n        const { soundOn } = getState().audio;\r\n        if(soundOn)\r\n        {\r\n            dispatch(updateAudioData('musicUrl', MenuMusic));\r\n        }\r\n    }\r\n}\r\n\r\nexport const playIntroSound = () => {\r\n    \r\n    return (dispatch, getState) => {\r\n        const { soundOn } = getState().audio;\r\n\r\n        if(soundOn)\r\n        {\r\n            dispatch(updateAudioData('musicUrl', IntroMusic));\r\n        }\r\n    }\r\n}\r\n\r\nexport const playButtonSound = () => {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: AUDIO_PLAY_SOUND, payload: CongaSound });\r\n    }\r\n};\r\n\r\nexport const moveSound = () => {\r\n    return{\r\n        type:AUDIO_MOVE_PIECE\r\n    }\r\n}\r\n\r\nexport const muteMusic = () => {\r\n    return (dispatch, getState) => {\r\n        const { musicOn } = getState().audio;\r\n        let musicOpposite = !musicOn;\r\n        dispatch(updateAudioData('musicOn', musicOpposite));\r\n    }\r\n}\r\n\r\nexport const muteSound = () => { \r\n    return (dispatch, getState) => {\r\n        const { soundOn } = getState().audio;\r\n        let soundOpposite = !soundOn;\r\n        dispatch(updateAudioData('soundOn', soundOpposite));\r\n    }\r\n}\r\n\r\nexport const changeSong = (url) => {\r\n    return (dispatch) => {\r\n       dispatch(updateAudioData('musicUrl', url));\r\n    }\r\n}\r\n\r\nexport const updateAudioData = (prop, value) => {\r\n    return (dispatch) => {\r\n        dispatch(updateData({ prop, value }));\r\n    }\r\n};\r\n\r\nconst updateData = ({ prop, value }) => {\r\n    return {\r\n        type: AUDIO_UPDATE_DATA,\r\n        payload: { prop, value }\r\n    };\r\n};\r\n","import { INTRO_UPDATE_DATA } from './types';\r\nimport history from '../history';\r\nimport { stopMusic } from './AudioActions';\r\n\r\n// Stop the intro if loading, nothing otherwise\r\nexport const stopIntroLoading = () => {\r\n    return (dispatch, getState) => {\r\n        const { loading } = getState().intro;\r\n        if (!loading)  return null;\r\n        dispatch(stopMusic());\r\n        history.push('/menu');\r\n        dispatch(updateIntroData('loading', false));\r\n    }\r\n};\r\n\r\nexport const updateIntroData = (prop, value) => {\r\n    return (dispatch) => {\r\n        dispatch(updateData({ prop, value }));\r\n    }\r\n};\r\n\r\nconst updateData = ({ prop, value }) => {\r\n    return {\r\n        type: INTRO_UPDATE_DATA,\r\n        payload: { prop, value }\r\n    };\r\n};","import { NETWORK_UPDATE_DATA, NETWORK_RECEIVE_MESSSAGE, NETWORK_RESET_DATA } from './types';\r\nimport Peer from 'peerjs';\r\nimport history from '../history';\r\nimport { selectBagPiece, selectBoardCell, updateBoardData, launchMultiplayer } from './BoardActions';\r\n\r\n\r\nexport const resetNetwork = (prop, value) => {\r\n    return (dispatch) => {\r\n        dispatch({ type: NETWORK_RESET_DATA });\r\n    };\r\n};\r\n\r\nexport const updateNetworkData = (prop, value) => {\r\n    return (dispatch) => {\r\n        dispatch(updateData({ prop, value }));\r\n    }\r\n};\r\n\r\nexport const connectToPeer = (peerId) => {\r\n\r\n    return (dispatch, getState) => {\r\n        \r\n        // Make connection to remote peer\r\n        const { peer } = getState().network;\r\n        peer.connect(peerId);\r\n        dispatch(updateNetworkData('remotePeerId', peerId));\r\n\r\n    };\r\n\r\n};\r\n\r\nexport const sendMessage = (message) => {\r\n\r\n    return (dispatch, getState) => {\r\n\r\n        const { peer } = getState().network;\r\n        dispatch(sendNetworkData('message', message));\r\n        dispatch({\r\n            type: NETWORK_RECEIVE_MESSSAGE,\r\n            payload: {\r\n                peerId: peer._id,\r\n                data: message\r\n            }\r\n        });\r\n        dispatch(updateNetworkData('messageInput', ''));\r\n\r\n    };\r\n\r\n}\r\n\r\nexport const sendNetworkData = (type, data) => {\r\n\r\n    return (dispatch, getState) => {\r\n\r\n        const { remotePeerId, peer } = getState().network;\r\n        console.log(`sending to ${remotePeerId}`, data);\r\n        const conn = peer.connect(remotePeerId);\r\n        conn.on('open', () => {\r\n            conn.send({ type, data });\r\n        });\r\n\r\n    };\r\n\r\n};\r\n\r\nexport const listenNetworkData = () => {\r\n\r\n    return (dispatch, getState) => {\r\n        const { peer, remotePeerId } = getState().network;\r\n        \r\n        // Listen for own connection\r\n        peer.on('open', function(id) {\r\n\r\n            dispatch(getPeersList());\r\n\r\n        });\r\n        \r\n        peer.on('error', function({type}) {\r\n            if (type === 'unavailable-id') {\r\n                console.log('Id is taken already');\r\n                alert('Username is already taken, please select another');\r\n                dispatch(updateNetworkData('peer', null));\r\n            }\r\n            if(type === \"peer-unavaliable\") {\r\n                console.log('Peer disconnected');\r\n                alert('Your opponent appears to have disconnected!');\r\n                peer.destroy();\r\n                history.push('/menu');\r\n            }\r\n        });\r\n        peer.on('connection', (conn) => {\r\n\r\n            // Connection was made by remote peer\r\n            conn.on('open', () => {\r\n                if (!remotePeerId.length) {\r\n                    dispatch(updateNetworkData('remotePeerId', conn.peer));\r\n                    dispatch(updateNetworkData('isInvited', true));\r\n                }\r\n            })\r\n            // Data was received from remote peer\r\n            conn.on('data', ({type, data}) => {\r\n                if (type === 'inviteStatus' && data === 'accepted') {\r\n                    alert('Your invite was accepted!');\r\n                    dispatch(updateBoardData('isUserTurn', false));\r\n                    dispatch(launchMultiplayer(true));\r\n\r\n                } else if (type === 'inviteStatus') {\r\n                    //alert('Your invite was declined.');\r\n                    dispatch(updateNetworkData('inviteSent', false));\r\n                    dispatch(updateNetworkData('isInvited', false));\r\n                }\r\n\r\n                if (type === 'message') {\r\n                    dispatch({\r\n                        type: NETWORK_RECEIVE_MESSSAGE,\r\n                        payload: {\r\n                            peerId: conn.peer,\r\n                            data\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (type === 'select_piece') {\r\n                    console.log('receiving selection...', data);\r\n                    dispatch(\r\n                        selectBagPiece(data, true)\r\n                    );\r\n                }\r\n\r\n                if (type === 'place_piece') {\r\n                    console.log('receving placement...', data);\r\n                    const { row, column } = data;\r\n                    dispatch(\r\n                        selectBoardCell(row, column, true)\r\n                    );\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n};\r\n\r\nexport const initPeer = ( userId ) => {\r\n    return (dispatch, getState) => {\r\n        const data = new Peer(userId, {\r\n            host: 'temple-quest-peerjs.herokuapp.com',\r\n            port: 80,\r\n            debug: 2,\r\n        });\r\n\r\n        dispatch(updateNetworkData('peer', data));\r\n    };\r\n}\r\n\r\nexport const getPeersList = () => {\r\n\r\n    return (dispatch, getState) => {\r\n        // Refresh connected users list\r\n        var { peer } = getState().network;\r\n        if (!peer) return;\r\n        peer.listAllPeers(list => {\r\n            const onlineUsers = list.filter((user) => {\r\n                return user !== peer.id;\r\n            });\r\n            dispatch(updateNetworkData('onlineUsers', onlineUsers));\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nconst updateData = ({ prop, value }) => {\r\n    return {\r\n        type: NETWORK_UPDATE_DATA,\r\n        payload: { prop, value }\r\n    };\r\n};","import history from '../history';\r\nimport { CheckWin, getCellPosition, startMinimax } from '../utils';\r\nimport { sendNetworkData } from './NetworkActions';\r\nimport { BOARD_INIT, BOARD_PICK_PIECE, BOARD_PLACE_PIECE, BOARD_RESET_GAME, BOARD_UPDATE_DATA, BOARD_UPDATE_PIECE_OBJECT } from './types';\r\nimport { playGameEndSound } from './AudioActions';\r\n\r\nexport const endGame = (playAgain = false) => {\r\n    return (dispatch, getState) => {\r\n        dispatch({ type: BOARD_RESET_GAME, payload: { playAgain } });\r\n        if (!playAgain) history.push('/menu');\r\n    };\r\n};\r\n\r\nexport const updatePieceObject = (pieceId, prop, value) => {\r\n    \r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: BOARD_UPDATE_PIECE_OBJECT,\r\n            payload: {\r\n                id: pieceId, prop, value\r\n            }\r\n        })\r\n    };\r\n};\r\n\r\nexport const launchMultiplayer = (isOnlineMode = false) => {\r\n    return (dispatch, getState) => {\r\n        dispatch(updateBoardData('isSingleMode', false));\r\n        if (isOnlineMode) dispatch(updateBoardData('isOnlineMode', true));\r\n        history.push('board');\r\n    };\r\n};\r\n\r\nexport const checkBoardWin = (pieceId) => { \r\n    return (dispatch, getState) => {\r\n        const { pieces, isUserTurn } = getState().board;\r\n        const { isOnlineMode, isSingleMode } = getState().board;\r\n        let hasWon = CheckWin(pieces, pieceId);\r\n        const boardIsFull = pieces.every(piece => !!piece.location);\r\n\r\n        if (hasWon || boardIsFull) {\r\n            dispatch(updateBoardData(\"isGameOver\", true));\r\n            // if is not win, then is tie due to full board\r\n            if (!hasWon) {\r\n                dispatch(updateBoardData(\"isTie\", true));\r\n            }\r\n            const isMultiplayer = !isOnlineMode && !isSingleMode;\r\n            dispatch(playGameEndSound(isUserTurn || isMultiplayer));\r\n        }\r\n    };\r\n};\r\n\r\nexport const initBoard = () => {\r\n    return {\r\n        type: BOARD_INIT\r\n    };\r\n};\r\n\r\nexport const selectBagPiece = (pieceId, isRemote = false) => {\r\n    return (dispatch, getState) => {\r\n        const { isOnlineMode, isSingleMode, pieces, cellCords } = getState().board;\r\n        const { selectedPieceId, difficultyLevel } = getState().board;\r\n\r\n        // Block acction if there is already a selected piece\r\n        if (selectedPieceId) return;\r\n\r\n        // Verify unplaced piece, block otherwise\r\n        const isUnplaced = pieces.find(({ id, location }) => id === parseInt(pieceId) && !location);\r\n        if (!isUnplaced) return;\r\n        \r\n        dispatch({\r\n            type: BOARD_PICK_PIECE,\r\n            payload: {\r\n                selectedPieceId: pieceId.toString(),\r\n            }\r\n        })\r\n\r\n        // Update 3D view\r\n        dispatch(updatePieceObject(pieceId, 'loc', [0, 0.069, -13]))\r\n\r\n        // Send to peer\r\n        if (isOnlineMode && !isRemote) {\r\n            dispatch(\r\n                sendNetworkData('select_piece', pieceId)\r\n            );\r\n        }\r\n\r\n        // AI\r\n        else if (isSingleMode && !isRemote){\r\n            var t1 = performance.now();\r\n            startMinimax(pieces, pieceId, difficultyLevel)\r\n                .then(({ location, pieceId }) => {\r\n                    dispatch(selectBoardCell(location.row, location.column, false));\r\n                    const {isGameOver} = getState().board;\r\n                    if (!isGameOver){\r\n                    dispatch(selectBagPiece(pieceId, true));\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    alert('The AI failed');\r\n                })\r\n            var t2 = performance.now();\r\n            console.log(\"Time elapsed: \", (t2-t1) / 1000, \" seconds\");\r\n        }\r\n    };\r\n};\r\n\r\nexport const selectBoardCell = (row, column, isRemote = false) => {\r\n    return (dispatch, getState) => {\r\n        const {isOnlineMode} = getState().board;\r\n        const position = getCellPosition(row, column);\r\n\r\n        // Get selected piece id or exit otherwise\r\n        const { selectedPieceId } = getState().board;\r\n        if (!selectedPieceId) return;\r\n\r\n        // Assign location to piece\r\n        dispatch({ \r\n            type: BOARD_PLACE_PIECE, \r\n            payload: {\r\n                pieceId: selectedPieceId, \r\n                location: { row, column },\r\n            } \r\n        });\r\n\r\n        // Update 3d view\r\n        if (position) {\r\n            const {x, y, z} = position;\r\n            dispatch(updatePieceObject(selectedPieceId, 'loc', [x,y,z]));\r\n        }\r\n        \r\n        // Check if it is a winning move\r\n        dispatch(checkBoardWin(selectedPieceId));\r\n\r\n        if (isOnlineMode) {\r\n            dispatch(updateBoardData('isUserTurn', !isRemote));\r\n            \r\n            // Send to peer\r\n            if (!isRemote) {\r\n                dispatch(\r\n                    sendNetworkData('place_piece', {row, column})\r\n                );\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const updateBoardData = (prop, value) => {\r\n    return (dispatch) => {\r\n        dispatch(updateData({ prop, value }));\r\n    }\r\n};\r\n\r\nconst updateData = ({ prop, value }) => {\r\n    return {\r\n        type: BOARD_UPDATE_DATA,\r\n        payload: { prop, value }\r\n    };\r\n};\r\n\r\n","import React, { Component } from 'react';\r\nimport { Container, Icon } from 'semantic-ui-react';\r\nimport history from '../history';\r\nimport { playButtonSound } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass MenuButton extends Component {\r\n\r\n    render () {\r\n        const { onClick, title, back, playButtonSound, hide } = this.props;\r\n        const btnTitle = back ? 'back' : title;\r\n\r\n        if (hide) return null;\r\n        let btnAction = () => {\r\n            playButtonSound();\r\n            if (back) {\r\n                history.goBack();\r\n            } else {\r\n                if (onClick) onClick();\r\n            }\r\n        };\r\n\r\n        return (\r\n            <Container\r\n            className=\"mainScreen__option\">\r\n                <button\r\n                className=\"menuButton\"\r\n                onClick={btnAction}>\r\n                    {back && (<Icon name=\"left arrow\" />)}\r\n                    {btnTitle}\r\n                </button>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n};\r\n\r\n\r\nexport default connect(null, {\r\n    playButtonSound\r\n})(MenuButton);","import React, { Component } from 'react';\r\nimport { Container, Grid, GridColumn } from 'semantic-ui-react';\r\nimport MenuButton from '../components/MenuButton';\r\n\r\n\r\nclass AboutScreen extends Component {\r\n    render() {\r\n        return (\r\n           <Grid className=\"screen\"\r\n            stretched padded centered>\r\n                <GridColumn verticalAlign=\"middle\" mobile={16} tablet={8} computer={10}>\r\n                <Container\r\n                className=\"screen__box\"\r\n                textAlign=\"center\">\r\n                    <h1>About</h1>\r\n                <p>\r\n                During the conquering from Spain, \r\n                Spanish soldiers captured the ruler of that time, Moctezuma. Due to the dominance of the Aztecs over the region, their culture was known for their riches. \r\n                And, according to the legend, Moctezuma had one of the biggest treasures ever.\r\n                </p>\r\n                <p>\r\n                Spanish soldiers tortured Moctezuma to make him reveal the location of the treasure, \r\n                but he never did it. Some people believe that at the middle of the chaos, Moctezuma’s guards moved the treasure to a safe place, where they \r\n                eventually took Moctezuma’s body too. \r\n                </p>\r\n                <p>\r\n                You, brave explorer, have now come upon the great temple of Moctezuma. The treasure hidden within could be yours! \r\n                Now, you stand at the entrance of your great Temple Quest, and you can practically feel the gold coins \r\n                on your fingertips. There's just one thing standing between you and the treasure... Moctezuma’s most mind bending puzzle:\r\n                </p>\r\n                <h2>QUARTO.</h2>\r\n                <p></p>\r\n                    </Container>\r\n                <MenuButton back />\r\n            </GridColumn>        \r\n        </Grid>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default AboutScreen;","import React, { Component } from 'react';\r\nimport { Button, Container, Grid, GridColumn, GridRow, Segment, Dimmer, Loader } from 'semantic-ui-react';\r\nimport history from '../history';\r\n\r\n\r\nclass ConnectionLost extends Component {\r\n\r\n    handleClick = (route) => history.push(route);\r\n    handleExit = () => {};\r\n\r\n    render () {\r\n        return(\r\n            <Grid stretched className=\"choiceScreen\" padded centered columns={3}>\r\n                <GridRow>\r\n                    <GridColumn verticalAlign=\"middle\">\r\n                        <Container className=\"playerChoice\">\r\n                            <h1>Connection Lost!</h1>\r\n                            <Segment>\r\n                            <Dimmer active>\r\n                                <Loader content='Trying to reconnect...' />\r\n                            </Dimmer>\r\n                            </Segment>\r\n                        </Container>\r\n  \r\n                        <Container\r\n                        className=\"mainScreen__option\">\r\n                            <Button   size=\"massive\" color=\"black\"\r\n                            onClick={() => this.handleClick('menu')}>\r\n                                MAIN MENU\r\n                            </Button>\r\n                        </Container>\r\n                    </GridColumn>\r\n                </GridRow>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConnectionLost;","import React, { Component } from 'react';\r\nimport { Grid, GridColumn } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport MenuButton from '../components/MenuButton';\r\nimport history from '../history';\r\nimport { updateBoardData } from '../actions';\r\n\r\n\r\nclass DifficultyScreen extends Component {\r\n\r\n    handleClick(level) {\r\n        this.props.updateBoardData('difficultyLevel', level);\r\n        history.push('board');\r\n    }\r\n\r\n    handleExit = () => {};\r\n\r\n    render () {\r\n        return(\r\n            <Grid stretched className=\"screen\" padded centered columns={3}>\r\n                    <GridColumn verticalAlign=\"middle\">\r\n                        <MenuButton title=\"easy\"\r\n                        onClick={() => this.handleClick(0)} />\r\n                        <MenuButton title=\"medium\"\r\n                        onClick={() => this.handleClick(1)} />\r\n                        <MenuButton title=\"hard\"\r\n                        onClick={() => this.handleClick(2)} />\r\n                       <MenuButton back/>\r\n                    </GridColumn>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, {\r\n    updateBoardData\r\n})(DifficultyScreen);","import React, { Component } from 'react';\r\nimport { Grid, GridColumn, GridRow } from 'semantic-ui-react';\r\nimport MenuButton from '../components/MenuButton';\r\nimport history from '../history';\r\n\r\nclass GameModeScreen extends Component {\r\n\r\n    handleClick = (route) => history.push(route);\r\n    handleExit = () => {};\r\n\r\n    render () {\r\n        return(\r\n            <Grid stretched className=\"screen\" padded centered columns={3}>\r\n                <GridRow>\r\n                    <GridColumn verticalAlign=\"middle\">\r\n                        <MenuButton title=\"singleplayer\"  \r\n                        onClick={() => this.handleClick('difficulty')}/>\r\n                        <MenuButton title=\"multiplayer\"  \r\n                        onClick={() => this.handleClick('local')}/>\r\n                        <MenuButton title=\"online\"  \r\n                        onClick={() => this.handleClick('online')}/>\r\n                        <MenuButton back />\r\n                    </GridColumn>\r\n                </GridRow>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameModeScreen;","import React from 'react';\r\nimport Avatars from '@dicebear/avatars';\r\nimport sprites from '@dicebear/avatars-gridy-sprites';\r\nimport {Image} from 'semantic-ui-react';\r\n\r\n\r\nexport default function RandomAvatar({ seed }) {\r\n\r\n    let options = { base64: true, width: 50 };\r\n    let avatars = new Avatars(sprites, options);\r\n    let svg = avatars.create(seed);\r\n\r\n    return (\r\n        <Image alt=\"avatar\" avatar src={svg} />\r\n    )\r\n}\r\n","import moment from 'moment';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Feed, Icon, Input, Modal } from 'semantic-ui-react';\r\nimport { listenNetworkData, sendMessage, sendNetworkData, updateNetworkData } from '../actions';\r\nimport Avatar from './Avatar';\r\n\r\n\r\nclass ChatBox extends Component {\r\n\r\n    handleMessageInput = ({target}) => this.props.updateNetworkData('messageInput', target.value);\r\n\r\n    handleMessageSend () {\r\n        this.props.sendMessage(this.props.messageInput);\r\n    }\r\n\r\n    renderMessages () {\r\n        return this.props.messages.map((m, idx) => {\r\n            return <Feed.Event key={idx}>\r\n                <Feed.Label>\r\n                    <Avatar seed={m.createdBy} />\r\n                </Feed.Label>\r\n                <Feed.Content>\r\n                    <Feed.Summary>\r\n                    <Feed.User>{m.createdBy}</Feed.User>\r\n                    <Feed.Date>{moment(m.createdOn).local().fromNow()}</Feed.Date>\r\n                    </Feed.Summary>\r\n                    <Feed.Extra text>\r\n                        {m.content}\r\n                    </Feed.Extra>\r\n                </Feed.Content>\r\n            </Feed.Event>\r\n        });\r\n    }\r\n\r\n    \r\n    render() {\r\n        if (!this.props.isOnlineMode) return null;\r\n\r\n        return (\r\n            <Modal trigger={this.props.children}>\r\n                <Modal.Header>Chat</Modal.Header>\r\n                <Modal.Content scrolling>\r\n                    <Modal.Description>\r\n                        <Feed>\r\n                            {this.renderMessages()}\r\n                        </Feed>\r\n                    \r\n                    </Modal.Description>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Input action\r\n                        fluid \r\n                        size=\"large\"\r\n                        placeholder='Message...'>\r\n                            <input onChange={this.handleMessageInput} \r\n                            value={this.props.messageInput}/>\r\n                            <Button icon labelPosition='right'\r\n                            onClick={this.handleMessageSend.bind(this)}>\r\n                                Send\r\n                                <Icon name='send' />\r\n                            </Button>\r\n                    </Input>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    };\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = ({ network, board }) => {\r\n    const { isOnlineMode } = board;\r\n    const { remotePeerId, messages, peer, messageInput } = network;\r\n    return { remotePeerId, messages, peer, isOnlineMode, messageInput };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n   updateNetworkData, sendNetworkData, listenNetworkData, sendMessage\r\n})(ChatBox);\r\n","import React, { Component } from 'react';\r\nimport { Icon } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nexport class TurnBox extends Component {\r\n\r\n    getTurnLabel () {\r\n        const { isUserTurn, selectedPieceId, isSingleMode } = this.props;\r\n        const { peerId, remotePeerId, isOnlineMode, playerOne, playerTwo } = this.props;\r\n        let playerName = 'you';\r\n        let opponentName = 'opponent';\r\n        let plural = isUserTurn ? '' : 's';\r\n        if (!isSingleMode) {\r\n            playerName = isOnlineMode ? peerId : playerOne;\r\n            opponentName = isOnlineMode ? remotePeerId : playerTwo;\r\n            plural = 's';\r\n        }\r\n        const current = isUserTurn ? playerName : opponentName;\r\n        \r\n        const action = selectedPieceId ? `place${plural}` : `pick${plural}`;\r\n        return `${current} ${action}`;\r\n    }\r\n\r\n    render() {\r\n        const {selectedPieceId} = this.props;\r\n        const iconName = selectedPieceId ? 'hand point down' : 'grab';\r\n\r\n        return (\r\n            <div>\r\n                <Icon name={iconName} />\r\n                {this.getTurnLabel()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({ board, network }) => {\r\n    const { isUserTurn, isOnlineMode, isSingleMode, selectedPieceId } = board;\r\n    const { playerOne, playerTwo } = board;\r\n    const { peerId, remotePeerId } = network;\r\n    return { \r\n        isUserTurn, isOnlineMode, isSingleMode, selectedPieceId, \r\n        peerId, playerOne, playerTwo, remotePeerId\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TurnBox);\r\n","import React from 'react';\r\nimport { Header, Icon, Segment } from 'semantic-ui-react';\r\nimport Slider from 'react-rangeslider';\r\nimport { connect } from 'react-redux';\r\nimport { updateAudioData } from '../actions';\r\n\r\n\r\nfunction SettingsBox(props) {\r\n    const setVolume = (type, value) => props.updateAudioData(`${type}Volume`, value);\r\n    const { musicVolume, soundVolume } = props;\r\n    return (\r\n        <Segment.Group class=\"settingsGroup\" \r\n        raised>\r\n            <Segment>\r\n                <Header as='h3' \r\n                dividing\r\n                textAlign=\"center\">\r\n                    <Icon name=\"music\" />\r\n                    Audio\r\n                </Header>\r\n                <div>\r\n                    Music Volume\r\n                    <Slider\r\n                    min={0}\r\n                    max={100}\r\n                    value={musicVolume}\r\n                    onChange={(value) => setVolume('music', value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    Sound Volume\r\n                    <Slider\r\n                    min={0}\r\n                    max={100}\r\n                    value={soundVolume}\r\n                    onChange={(value) => setVolume('sound', value)}\r\n                    />\r\n                </div>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = ({ audio }) => {\r\n    const { musicOn, soundOn, musicVolume, soundVolume} = audio;\r\n    return { musicOn, soundOn, musicVolume, soundVolume};\r\n};\r\n\r\nexport default connect(mapStateToProps, { \r\n    updateAudioData\r\n})(SettingsBox);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport SettingsBox from './SettingsBox';\r\n\r\n\r\nclass SettingsModal extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <Modal trigger={this.props.children}>\r\n                <Modal.Header>Settings</Modal.Header>\r\n                <Modal.Content>\r\n                    <Modal.Description>\r\n                        <SettingsBox />\r\n                    </Modal.Description>\r\n                </Modal.Content>\r\n            </Modal>\r\n        )\r\n    };\r\n\r\n}\r\n\r\nexport default SettingsModal;\r\n","import React, { Component } from 'react';\r\nimport { Menu, Icon, Button } from 'semantic-ui-react';\r\nimport ChatBox from './ChatBox';\r\nimport TurnBox from './TurnBox';\r\nimport { connect } from 'react-redux';\r\nimport { endGame } from '../actions';\r\nimport SettingsModal from './SettingsModal';\r\n\r\n\r\nclass GameNavbar extends Component {\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n\r\n  render() {\r\n    const { score, isOnlineMode, isSingleMode } = this.props;\r\n    const isMultiplayer = !isOnlineMode && !isSingleMode;\r\n\r\n\r\n    return (\r\n      <Menu style={{ margin: 0 }} size=\"huge\" inverted\r\n      className=\"gameNavBar\">\r\n         <Menu.Item\r\n            name='turn'>\r\n              <TurnBox />\r\n          </Menu.Item>\r\n         {!isMultiplayer && (<Menu.Item\r\n            name='turn'>\r\n              <Icon name=\"diamond\" color=\"teal\" />\r\n              {score}\r\n          </Menu.Item>)}\r\n          <Menu.Menu position=\"right\">\r\n            <ChatBox >\r\n              <Menu.Item\r\n              name='chat'\r\n              onClick={this.handleItemClick}>\r\n                <Button icon inverted>\r\n                  <Icon name='chat' />\r\n                  Chat\r\n                </Button>\r\n              </Menu.Item>\r\n            </ChatBox>\r\n            <SettingsModal>\r\n              <Menu.Item\r\n              name='settings'>\r\n                <Button icon inverted>\r\n                  <Icon name=\"setting\" />\r\n                  Settings\r\n                </Button>\r\n              </Menu.Item>\r\n            </SettingsModal>\r\n            <Menu.Item\r\n            name='end'>\r\n              <Button icon inverted\r\n              onClick={() => this.props.endGame(false)}>\r\n                <Icon name=\"close\" color=\"red\" />\r\n                End game\r\n              </Button>\r\n            </Menu.Item>\r\n          </Menu.Menu>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({ board }) => {\r\n  const { score, isOnlineMode, isSingleMode } = board;\r\n  return { score, isOnlineMode, isSingleMode };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  endGame\r\n})(GameNavbar);","import { Vector3 } from '@babylonjs/core/Maths/math';\r\nimport React, { Component } from 'react';\r\nimport { DirectionalLight, ShadowGenerator, HemisphericLight } from 'react-babylonjs';\r\n\r\n\r\nclass RoomLights extends Component {\r\n\r\n    renderLights () {\r\n        const intensity = 1.7;\r\n        const lights = [\r\n            // {direction: [1, -.35, 0] , position: [20, 20, 0]}\r\n            // {direction: [-1, -.35, 1] , position: [20, 20, -20]}, // BL\r\n            {direction: [1, -.35, -1] , position: [-20, 20, 20]}, // TR\r\n            // {direction: [-1, -.35, -1] , position: [20, 20, 20]}, // BR\r\n            {direction: [1, -.35, 1] , position: [-20, 20, -20]}, // TL\r\n        ];\r\n\r\n        return lights.map((light, idx) => {\r\n            const [d1, d2, d3] = light.direction; \r\n            const [p1, p2, p3] = light.position; \r\n            return (\r\n                <DirectionalLight name={`dl0${idx}`} \r\n                intensity={intensity}\r\n                direction={new Vector3(d1, d2, d3)} \r\n                position = {new Vector3(p1, p2, p3)}>\r\n                  <ShadowGenerator \r\n                  mapSize={1024} \r\n                  useBlurExponentialShadowMap={true} \r\n                  blurKernel={32} \r\n                  shadowCasters={[\"counterClockwise\", \"clockwise\", \"BoomBox\"]} />\r\n                </DirectionalLight>\r\n            );\r\n        });\r\n    }\r\n\r\n    render () {\r\n\r\n        return (\r\n            <>\r\n                <HemisphericLight\r\n                intensity = {1.5}\r\n                position = {Vector3.Up()}\r\n                />\r\n                {this.renderLights()}\r\n            </>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default RoomLights;\r\n","import { Vector3 } from '@babylonjs/core/Maths/math';\r\nimport React, { Component } from 'react';\r\nimport { Model } from 'react-babylonjs';\r\n\r\n\r\nlet baseUrl = `${process.env.PUBLIC_URL}/objects/`;\r\n\r\n\r\nclass RoomWalls extends Component {\r\n\r\n    renderWalls() {\r\n        const { roomId } = this.props;\r\n\r\n        const walls = [\r\n            {position: [-40, 0, 0], rotation: [0, 0, 0]},\r\n            {position: [0, 0, -40], rotation: [0, Math.PI/2, 0]},\r\n            {position: [40, 0, 0], rotation: [0, 0, 0]},\r\n            {position: [0, 0, 40], rotation: [0, Math.PI/2, 0]},\r\n        ];\r\n\r\n        return walls.map((wall, idx) => {\r\n            const [p1, p2, p3] = wall.position;\r\n            const [r1, r2, r3] = wall.rotation;\r\n            return (\r\n                <Model sceneFilename={`frontWall${roomId}.glb`}\r\n                rootUrl = {baseUrl}\r\n                position = {new Vector3(p1, p2, p3) }\r\n                rotation = {new Vector3(r1, r2, r3) }\r\n                />\r\n            );\r\n        });\r\n\r\n    }\r\n\r\n    render () {\r\n        return (\r\n          <>\r\n            {this.renderWalls()}\r\n          </>\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default RoomWalls;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react';\r\nimport { endGame } from '../actions';\r\n\r\n\r\nclass EndModal extends Component {\r\n\r\n    handleClick = (playAgain) => this.props.endGame(playAgain);\r\n\r\n    render() {\r\n        const { isGameOver, isUserTurn, isOnlineMode, isSingleMode, isTie } = this.props;\r\n        const { playerOne, playerTwo, peerId, remotePeerId } = this.props;\r\n        let message = isUserTurn ? \"You've won!!!!!!\" : \"Game Over, you lost\";\r\n        if (!isSingleMode) {\r\n            if (isOnlineMode) message = isUserTurn ? 'You' : remotePeerId;\r\n            else message = isUserTurn ? playerOne : playerTwo;\r\n            message += ' won the game!';\r\n        }\r\n        if (isTie) message = \"Game Over. Is a tie!\";\r\n        return (\r\n        <Modal\r\n        open={isGameOver}\r\n        basic\r\n        size='small'>\r\n            <Header icon='flag' content={message} />\r\n            <Modal.Content>\r\n            <h3>Do you want to play other round?</h3>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n            <Button color='red' onClick={() => this.handleClick(false)} inverted>\r\n                <Icon name='cancel' /> No\r\n            </Button>\r\n            <Button color='green' onClick={() => this.handleClick(true)} inverted>\r\n                <Icon name='checkmark' /> Yes\r\n            </Button>\r\n            </Modal.Actions>\r\n        </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ board, network }) => {\r\n    const { score, isGameOver, isUserTurn, isOnlineMode, isSingleMode, isTie } = board;\r\n    const { playerTwo, playerOne } = board;\r\n    const { peerId, remotePeerId } = network;\r\n    return { \r\n        score, isGameOver, isUserTurn, isOnlineMode, isSingleMode,\r\n        playerOne, playerTwo, peerId, remotePeerId, isTie\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    endGame\r\n})(EndModal);\r\n","import { Vector3 } from '@babylonjs/core/Maths/math';\r\nimport React, { Component } from 'react';\r\nimport { ArcRotateCamera, Engine, Ground, Model, Scene } from 'react-babylonjs';\r\nimport { connect } from 'react-redux';\r\nimport { initBoard, selectBagPiece, selectBoardCell, stopMusic, updateBoardData, updatePieceObject } from '../actions';\r\nimport GameNavbar from '../components/GameNavbar';\r\nimport RoomLights from '../components/RoomLights';\r\nimport RoomWalls from '../components/RoomWalls';\r\nimport EndModal from '../components/EndModal';\r\n\r\n\r\nlet baseUrl = `${process.env.PUBLIC_URL}/objects/`;\r\n\r\nclass GameScreen extends Component {\r\n\r\n    componentWillMount() {\r\n        this.props.stopMusic();\r\n        this.props.initBoard();\r\n    }\r\n\r\n    handleOnlineChange () {\r\n        const { isOnlineMode } = this.props;\r\n        this.props.updateBoardData('isOnlineMode', !isOnlineMode);\r\n    }\r\n\r\n    hasValidTurn() {\r\n        const { isUserTurn, isSingleMode, isOnlineMode } = this.props;\r\n        return !(!isUserTurn && (isSingleMode || isOnlineMode));\r\n    }\r\n\r\n    handlePieceClick (pieceId) {\r\n        const { selectBagPiece } = this.props;\r\n        if (!this.hasValidTurn()) return;\r\n        selectBagPiece(pieceId);\r\n    }\r\n\r\n    handleCellClick (row, column) {\r\n        const { selectBoardCell } = this.props;\r\n        if (!this.hasValidTurn()) return;\r\n        selectBoardCell(row, column, false);\r\n    }\r\n\r\n    isUsedLocation(row, column) {\r\n        return !!this.props.pieces.find((piece) => {\r\n            if (!piece.location) return false;\r\n            const { location } = piece;\r\n            return location.row === row && location.column === column\r\n        });\r\n    }\r\n\r\n    meshPicked(mesh) {\r\n        //console.log(mesh);\r\n        const {cellCords} = this.props;\r\n        const {name, _absolutePosition : position} = mesh;\r\n        //console.log(name);\r\n        if (name === 'Cylinder.015') {\r\n            const cellIdx = cellCords.findIndex((cell) => {\r\n                return cell[0] === position.x && cell[2] === position.z;\r\n            });\r\n            if (cellIdx < 0) return;\r\n            // TODO: Update cord of selected piece\r\n            const column = parseInt(cellIdx) % 4;\r\n            const row = Math.floor(parseInt(cellIdx) / 4);\r\n            this.handleCellClick(row, column);\r\n        }\r\n        else if (name.includes('_primitive')) {\r\n            //console.log(name);\r\n            const piece = this.props.pieceObjects.find(((piece) => {\r\n                return name.includes(piece.obj);\r\n            }));\r\n            if (piece) {\r\n                // UPDATE DELECTED PIECE ID\r\n                this.handlePieceClick(piece.id);\r\n            }\r\n        }\r\n            \r\n    }\r\n\r\n    onSceneMount (e) {\r\n        const {scene} = e;\r\n        scene.getEngine().displayLoadingUI();\r\n        setTimeout(() => {  \r\n            scene.getEngine().hideLoadingUI();\r\n        }, 5000);\r\n    }\r\n\r\n    render () {\r\n        const { roomId } = this.props;\r\n\r\n        return (\r\n            <div className=\"gameScreen\">\r\n            <EndModal />\r\n            <GameNavbar/>\r\n                <Engine canvasId=\"playground\" adaptToDeviceRatio antialias>\r\n                    <Scene \r\n                    onSceneMount={this.onSceneMount}\r\n                    onMeshPicked={this.meshPicked.bind(this)} >\r\n                        <ArcRotateCamera \r\n                        name=\"camera1\"\r\n                        radius={35} \r\n                        setPosition={[new Vector3(30, 25, 0)]}\r\n                        upperRadiusLimit = {39}\r\n                        lowerRadiusLimit = {20}\r\n                        panningSensibility = {0}\r\n                        lowerAlphaLimit = {Math.PI / -18}\r\n                        upperAlphaLimit = {Math.PI / 18}\r\n                        lowerBetaLimit = {Math.PI / 3}\r\n                        upperBetaLimit = {(Math.PI / 3) *1}\r\n                        target={Vector3.Zero()} \r\n                        minZ={0.001} />\r\n                        <RoomLights />\r\n                        <Model sceneFilename={`treasureChest.glb`}\r\n                            rootUrl = {baseUrl}\r\n                            scaling = {new Vector3(6, 6, 6)}\r\n                            position = { new Vector3(-25, -1.3, 0) }\r\n                        />\r\n                        {roomId === 1 && (<RoomWalls roomId={1} />)}\r\n                        {roomId === 2 && (<RoomWalls roomId={2} />)}\r\n                        {roomId === 1 && this.renderGround(1)}\r\n                        {roomId === 2 && this.renderGround(2)}\r\n                        {this.renderPieces()}\r\n                    </Scene>\r\n                </Engine>\r\n        </div>\r\n        );\r\n    }\r\n\r\n    renderGround(roomId) {\r\n        return (\r\n            <> \r\n                <Model sceneFilename={`gameBoard${roomId}.glb`}\r\n                    rootUrl = {baseUrl}\r\n                />\r\n                <Model sceneFilename={`slabForPieces${roomId}.glb`}\r\n                    rootUrl = {baseUrl}\r\n                    position = { new Vector3(0, 0.069, 15) }\r\n                />\r\n                <Model sceneFilename={`coaster${roomId}.glb`}\r\n                    rootUrl = {baseUrl}\r\n                    position = { new Vector3(0, 0.15, -13) }\r\n                />\r\n                <Ground name=\"ground\" subdivisions={1} >\r\n                    <Model sceneFilename={`floor${roomId}.glb`}\r\n                        rootUrl = {baseUrl}\r\n                        position = {Vector3.Zero() }\r\n                    />\r\n                </Ground>\r\n                {this.renderCells(roomId)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderPieces () {\r\n        const pieceScaling = new Vector3(0.6, 0.6, 0.6);\r\n        return this.props.pieceObjects.map((piece, idx) => {\r\n            const {loc} = piece;\r\n            return (\r\n                <Model \r\n                name={'hehe'}\r\n                sceneFilename={`${piece.obj}.glb`}\r\n                    rootUrl = {baseUrl}\r\n                    position = {new Vector3(loc[0], loc[1], loc[2])}\r\n                    scaling = {pieceScaling}\r\n                    key={idx}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    renderCells(roomId) {\r\n        return this.props.cellCords.map((cord, idx)=>{\r\n            return (\r\n                <Model sceneFilename={`pieceThatGoesInHole${roomId}.glb`}\r\n                    rootUrl = {baseUrl}\r\n                    position = {new Vector3(cord[0], 0.015, cord[2])}\r\n                    key={idx}\r\n                    meshNames={[\"testing!\"]}\r\n                />\r\n            );\r\n        });\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({ board, network }) => {\r\n    const { pieces, isUserTurn, selectedPieceId, isOnlineMode, roomId } = board;\r\n    const { hasPieceBeenPicked, cellCords, pieceObjects, isSingleMode } = board;\r\n    return { \r\n        pieces, isUserTurn, selectedPieceId, \r\n        isOnlineMode, hasPieceBeenPicked, roomId,\r\n        cellCords, pieceObjects, isSingleMode\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    initBoard, selectBagPiece, selectBoardCell, updateBoardData, updatePieceObject, stopMusic\r\n})(GameScreen);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { stopIntroLoading, playIntroSound } from '../actions';\r\nimport TeamLogo from '../assets/img/TeamLogo.svg';\r\n\r\n\r\n\r\nclass IntroScreen extends Component {\r\n\r\n    stopIntro = () => this.props.stopIntroLoading();\r\n\r\n    componentDidMount () {\r\n        setTimeout(this.stopIntro, 3000);\r\n        this.props.playIntroSound();\r\n    }\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <div tabIndex=\"0\" \r\n            className=\"introScreen\" \r\n            onClick={this.stopIntro} \r\n            onKeyDown={this.stopIntro} >\r\n                <div className=\"introScreen__logo\" >\r\n                    <img src={TeamLogo} alt=\"\"/>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ intro }) => {\r\n    const { loading } = intro;\r\n    return { loading };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    stopIntroLoading, playIntroSound\r\n})(IntroScreen);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Container, Divider, Grid, GridColumn, Header, Input, Segment } from 'semantic-ui-react';\r\nimport { launchMultiplayer, updateBoardData } from '../actions';\r\nimport MenuButton from '../components/MenuButton';\r\n\r\nclass LocalSetupScreen extends Component {\r\n\r\n    handleClick = () => this.props.launchMultiplayer();\r\n    handleInputChange = (playerNum,value) => this.props.updateBoardData(`player${playerNum}`, value);\r\n    handleExit = () => {};\r\n\r\n    render () {\r\n        const {playerTwo, playerOne} = this.props;\r\n        console.log(playerOne.length && playerTwo.length);\r\n        return(\r\n            <Grid stretched className=\"screen\" padded centered columns={3}>\r\n                <GridColumn verticalAlign=\"middle\"\r\n                mobile={16} tablet={8} computer={6}\r\n                >\r\n                    <Container>\r\n                        <Segment raised>\r\n                            <Header as=\"h3\" textAlign=\"center\" dividing>\r\n                                Who are the players?\r\n                            </Header>\r\n                            <Input fluid\r\n                            size=\"massive\"\r\n                            placeholder=\"Player one\" >\r\n                                <input onChange={({target: {value}}) => this.handleInputChange('One', value)}\r\n                                value={playerOne}/>\r\n                            </Input>\r\n                            <Divider />\r\n                            <Input fluid\r\n                            size=\"massive\"\r\n                            placeholder=\"Player two\" >\r\n                                <input onChange={({target: {value}}) => this.handleInputChange('Two', value)}\r\n                                value={playerTwo}/>\r\n                            </Input>\r\n                        </Segment>\r\n                        </Container>\r\n                    <MenuButton title=\"Start\" \r\n                    hide={!playerOne.length || !playerTwo.length}\r\n                    onClick={() => {this.handleClick('game')}}/>\r\n                    <MenuButton back/>\r\n                </GridColumn>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ board }) => {\r\n    const { playerOne, playerTwo } = board;\r\n    return { playerOne, playerTwo };\r\n};\r\n\r\nexport default connect (mapStateToProps, {\r\n    launchMultiplayer, updateBoardData\r\n})(LocalSetupScreen);","import React, { Component } from 'react';\r\nimport { Grid, GridColumn, GridRow } from 'semantic-ui-react';\r\nimport MenuButton from '../components/MenuButton';\r\nimport history from '../history';\r\nimport GameLogo from '../assets/img/gameLogo.svg';\r\nimport { playMenuSound } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass MainScreen extends Component {\r\n\r\n    handleClick = (route) => history.push(route);\r\n\r\n    componentDidMount() {\r\n        this.props.playMenuSound();\r\n    }\r\n\r\n    render () {\r\n        return(\r\n            <Grid stretched className=\"mainScreen\" padded centered columns={3}>\r\n                <GridRow>\r\n                    <GridColumn verticalAlign=\"middle\">\r\n                        <div className=\"mainScreen__logo\" >\r\n                            <img src={GameLogo} alt=\"\"/>\r\n                        </div>\r\n                        <MenuButton title='play'\r\n                        onClick={() => this.handleClick('mode')}/>\r\n                        <MenuButton title='how to play'\r\n                        onClick={() => this.handleClick('tutorial')}/>\r\n                        <MenuButton title='settings'\r\n                        onClick={() => this.handleClick('settings')}/>\r\n                        <MenuButton title='about'\r\n                        onClick={() => this.handleClick('about')}/>\r\n                    </GridColumn>\r\n                </GridRow>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, {\r\n    playMenuSound\r\n})(MainScreen);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Header, List, Segment } from 'semantic-ui-react';\r\nimport { connectToPeer, getPeersList, initPeer, listenNetworkData, updateNetworkData } from '../actions/NetworkActions';\r\nimport Avatar from './Avatar';\r\n\r\nclass PeersList extends Component {\r\n\r\n    componentDidMount () {\r\n        this.props.getPeersList();\r\n    }\r\n\r\n\r\n    connectToPeer(peerId) {\r\n        this.props.updateNetworkData('remotePeerId', peerId);\r\n        this.props.connectToPeer(peerId);\r\n        this.props.updateNetworkData('inviteSent', true);\r\n    }\r\n\r\n    displayPeersListItems () {\r\n        var peersList = this.props.onlineUsers;\r\n        if (!peersList.length) {\r\n            return \"No available users\";\r\n        }\r\n\r\n        return peersList.map((p, idx) => {\r\n            return (\r\n                <List.Item \r\n                key={idx}\r\n                onClick={() => this.connectToPeer(p)}>\r\n                    <Avatar seed={p} />\r\n                    <List.Content>\r\n                        <List.Header>\r\n                            {p}\r\n                        </List.Header>\r\n                    </List.Content>\r\n                </List.Item>\r\n            );\r\n        });\r\n    }\r\n\r\n    render () {\r\n        const {peer, isInvited, inviteSent} = this.props;\r\n        if (!peer || isInvited || inviteSent) return null;\r\n       \r\n        return (\r\n            <Segment>\r\n                <Header as='h3' \r\n                dividing\r\n                size=\"large\"\r\n                textAlign=\"left\">\r\n                    Online Users\r\n                    <Button color=\"black\" floated=\"right\"\r\n                    onClick={this.props.getPeersList}>\r\n                        Refresh\r\n                    </Button>\r\n                    <Header.Subheader>\r\n                        Select one to send an invite!\r\n                    </Header.Subheader>\r\n                   \r\n                </Header>\r\n                <List selection verticalAlign=\"middle\" size=\"huge\" className=\"peersList\">\r\n                    {this.displayPeersListItems()}\r\n                </List>\r\n            </Segment>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = ({ network }) => {\r\n    const { remotePeerId, onlineUsers, peer, peerId, inviteSent, isInvited } = network;\r\n    return {remotePeerId, onlineUsers, peer, peerId, inviteSent, isInvited};\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    listenNetworkData, initPeer, getPeersList, updateNetworkData, connectToPeer\r\n})(PeersList);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Input, Segment, Header } from 'semantic-ui-react';\r\nimport { launchMultiplayer, resetNetwork } from '../actions';\r\nimport { getPeersList, initPeer, listenNetworkData, sendNetworkData, updateNetworkData } from '../actions/NetworkActions';\r\n\r\n\r\nfunction UsernameInput(props) {\r\n\r\n    const handleInputChange = (e) => props.updateNetworkData('peerId', e.target.value);\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { peerId } = props;\r\n        if(/^[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]*[a-zA-Z]*[a-zA-Z]*[a-zA-Z]*[a-zA-Z]*[a-zA-Z]*/.test(peerId)) {\r\n            props.initPeer(peerId);\r\n            props.listenNetworkData({});\r\n        }\r\n        else {\r\n            alert('Invalid username, all usernames must be between 4 and 10 characters long as well as only letters.')\r\n        }\r\n    };\r\n    const {peerId, peer} =props;\r\n    const isConnected = !!peer;\r\n\r\n    if (isConnected) return null;\r\n\r\n    return (\r\n        <Segment>\r\n            <Header as='h3' \r\n            dividing\r\n            textAlign=\"center\">\r\n                Choose your username\r\n            </Header>\r\n            <Input action fluid\r\n            size=\"large\"\r\n            placeholder=\"My username\" >\r\n                <input onChange={handleInputChange}\r\n                value={peerId}/>\r\n                <Button onClick={handleSubmit}\r\n                color=\"green\">\r\n                Save\r\n                </Button>\r\n            </Input>\r\n        </Segment>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = ({ network }) => {\r\n    const { remotePeerId, onlineUsers, peer, peerId, \r\n        isInvited, inviteSent, inviteStatus } = network;\r\n    return {remotePeerId, onlineUsers, peer, peerId, \r\n        isInvited, inviteSent, inviteStatus};\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    listenNetworkData, initPeer, getPeersList, updateNetworkData, \r\n    launchMultiplayer, resetNetwork, sendNetworkData\r\n})(UsernameInput);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Confirm, Container, Grid, GridColumn, GridRow, Icon, Message } from 'semantic-ui-react';\r\nimport { launchMultiplayer, resetNetwork } from '../actions';\r\nimport { getPeersList, initPeer, listenNetworkData, sendNetworkData, updateNetworkData } from '../actions/NetworkActions';\r\nimport MenuButton from '../components/MenuButton';\r\nimport PeersList from '../components/PeersList';\r\nimport UsernameInput from '../components/UsernameInput';\r\n\r\n\r\nclass OnlineSetupScreen extends Component{\r\n    \r\n    handleClick = () => this.props.updateNetworkData('inviteSent', true);\r\n    handleConfirm = () => { \r\n        this.props.sendNetworkData('inviteStatus', 'accepted');\r\n        this.props.launchMultiplayer(true);\r\n    }\r\n    handleCancel = () => {\r\n        this.props.sendNetworkData('inviteStatus', 'declined');\r\n        this.props.updateNetworkData('isInvited', false);\r\n    }\r\n\r\n    refreshList() {\r\n        this.props.getPeersList();\r\n    }\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.refreshList = this.refreshList.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.resetNetwork();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n\r\n        <Grid stretched className=\"screen\" padded centered columns={3}>\r\n            <GridRow>\r\n                <GridColumn verticalAlign=\"middle\">\r\n                    <Container>\r\n                        <UsernameInput />\r\n                    {this.props.inviteSent && this.props.inviteStatus === 'pending' && (\r\n                           <Message icon>\r\n                               <Icon name='circle notched' loading />\r\n                               <Message.Content>\r\n                                <Message.Header>Invite Sent</Message.Header>\r\n                                    Your invite has been sent, please wait for a response.\r\n                               </Message.Content>\r\n                           </Message> \r\n                        )}\r\n                        {this.props.inviteStatus === 'declined' && (\r\n                           <Message icon>\r\n                               <Icon name='circle notched' loading />\r\n                               <Message.Content>\r\n                                <Message.Header>Invite Sent</Message.Header>\r\n                                    Your invite has been sent, please wait for a response.\r\n                               </Message.Content>\r\n                           </Message> \r\n                        )}\r\n                    </Container>\r\n                        <PeersList />\r\n                    <Container\r\n                    className=\"mainScreen__option\">\r\n                        \r\n                        <Confirm\r\n                        open={this.props.isInvited && !this.props.inviteSent}\r\n                        content= {this.props.remotePeerId  + ' would like to play with you!'}\r\n                        cancelButton='DECLINE'\r\n                        confirmButton='ACCEPT'\r\n                        onConfirm={this.handleConfirm}\r\n                        onCancel={this.handleCancel}\r\n                        />\r\n                    </Container>\r\n                    <MenuButton back />\r\n                </GridColumn>\r\n            </GridRow>\r\n        </Grid>\r\n\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = ({ network }) => {\r\n    const { remotePeerId, onlineUsers, peer, peerId, isInvited, inviteSent, inviteStatus } = network;\r\n    return {remotePeerId, onlineUsers, peer, peerId, isInvited, inviteSent, inviteStatus};\r\n};\r\n\r\nexport default  connect(mapStateToProps, {\r\n    listenNetworkData, initPeer, getPeersList, updateNetworkData, launchMultiplayer, resetNetwork, sendNetworkData\r\n})(OnlineSetupScreen);;\r\n","import React, { Component } from 'react';\r\nimport { Container, Grid, GridColumn, GridRow } from 'semantic-ui-react';\r\nimport MenuButton from '../components/MenuButton';\r\nimport SettingsBox from '../components/SettingsBox';\r\n\r\n\r\nclass SettingsScreen extends Component{\r\n\r\n    render() {\r\n        return(\r\n            <Grid stretched className=\"screen\" padded centered columns={3}>\r\n            <GridRow>\r\n                <GridColumn verticalAlign=\"middle\">\r\n                    <Container>\r\n                        <SettingsBox />\r\n                    </Container>\r\n                   <MenuButton back />\r\n                </GridColumn>\r\n            </GridRow>\r\n        </Grid>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default SettingsScreen;\r\n","import React, { Component } from 'react';\r\nimport MenuButton from '../components/MenuButton';\r\nimport { Container, Grid, GridColumn } from 'semantic-ui-react';\r\n\r\n\r\nclass TutorialScreen extends Component{\r\n    render() {\r\n        return(\r\n            <Grid className=\"screen\" \r\n            stretched padded centered>\r\n                <GridColumn verticalAlign=\"middle\"\r\n                mobile={16} tablet={8} computer={10}>\r\n                    <Container\r\n                    textAlign=\"center\"\r\n                    className=\"screen__box\">\r\n                    <h1>How To Play</h1>\r\n                    <p>Quarto is an abstract strategy game with 16 different pieces, each with\r\n                        a different set of four characteristics:\r\n                    </p>\r\n                    <h2>Height, color, shape, and surface.</h2>\r\n                    <p>\r\n                        The goal of the game is to complete a row of 4 pieces\r\n                        with 1 characteristic in common. It doesn't matter who placed the other 3 pieces,\r\n                        the winner is the player that placed the last piece.\r\n                        Players will take turns placing pieces on the board. The catch is, \r\n                        the opponent picks the current player's piece.\r\n                    </p>\r\n                    <h2>Tips:</h2>\r\n                    <ul>\r\n                    <li>Try to check the board for each different characteristic. Sometimes you may be \r\n                        watching for 3 different characteristics, but one might go unnoticed. </li>\r\n                        <p></p>\r\n                        <li>Once a row of 3 pieces has been placed, the next turn could win the game.\r\n                                Pay close attention to that last spot and what could win there.</li>                    \r\n                    </ul>\r\n                    </Container>\r\n                    <MenuButton back />\r\n                </GridColumn>\r\n        </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TutorialScreen;","import React, {Component} from 'react';\r\nimport jungleMainMenu from '../assets/img/bgvideo.mp4';\r\nimport { connect } from 'react-redux';\r\n\r\nclass BackgroundVideo extends Component {\r\n\r\n\r\n    render () {\r\n        return (\r\n            <video id=\"jungleVideoMainMenu\" \r\n            src={jungleMainMenu} \r\n            type=\"video/mp4\" \r\n            autoPlay muted loop /> \r\n        );\r\n    }\r\n};\r\n\r\nexport default connect(null)(BackgroundVideo);","import React, { Component } from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport { connect } from 'react-redux';\r\nimport { updateAudioData } from '../actions';\r\n\r\nclass AudioPlayer extends Component {\r\n    render() {\r\n        const {musicOn, musicUrl, soundOn, soundUrl, playingSound} = this.props;\r\n        const {musicVolume, soundVolume} = this.props;\r\n        return (\r\n            <>\r\n                <ReactPlayer id=\"musicPlayer\" \r\n                loop \r\n                volume={musicVolume/100}\r\n                height={0} \r\n                playing\r\n                muted={!musicOn}\r\n                width={0} url={musicUrl}/>\r\n                <ReactPlayer id=\"soundPlayer\" \r\n                volume={soundVolume/100}\r\n                height={0} \r\n                muted={!soundOn} \r\n                playing={playingSound}\r\n                onEnded={() => this.props.updateAudioData('playingSound', false)}\r\n                width={0} url={soundUrl}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ audio }) => {\r\n    const { musicUrl, soundUrl, musicOn, soundOn, playingSound, musicVolume, soundVolume } = audio;\r\n    return { musicUrl, soundUrl, musicOn, soundOn, playingSound, musicVolume, soundVolume };\r\n};\r\n\r\nexport default connect(mapStateToProps, { \r\n    updateAudioData\r\n})(AudioPlayer);","import React from 'react';\r\nimport { Route, Router } from 'react-router-dom';\r\nimport history from './history';\r\nimport AboutScreen from './screens/AboutScreen';\r\nimport ConnectionLost from './screens/ConnectionLost';\r\nimport DifficultyScreen from './screens/DifficultyScreen';\r\nimport GameModeScreen from './screens/GameModeScreen';\r\nimport GameScreen from './screens/GameScreen';\r\nimport IntroScreen from './screens/IntroScreen';\r\nimport LocalSetupScreen from './screens/LocalSetupScreen';\r\nimport MainScreen from './screens/MainScreen';\r\nimport OnlineSetupScreen from './screens/OnlineSetupScreen';\r\nimport SettingsScreen from './screens/SettingsScreen';\r\nimport TutorialScreen from './screens/TutorialScreen';\r\nimport BackgroundVideo from './components/BackgroundVideo';\r\nimport AudioPlayer from './components/AudioPlayer';\r\n\r\n\r\nconst Routes = () => {\r\n\r\n    return (\r\n      <Router history={history}>\r\n          <BackgroundVideo />\r\n          <AudioPlayer />\r\n          <Route path=\"/\" component={IntroScreen} exact/>\r\n          <Route path=\"/menu\" component={MainScreen}/>\r\n          <Route path=\"/mode\" component={GameModeScreen}/>\r\n          <Route path=\"/local\" component={LocalSetupScreen}/>\r\n          <Route path=\"/online\" component={OnlineSetupScreen}/>\r\n          <Route path=\"/play\" component={GameModeScreen}/>\r\n          <Route path=\"/board\" component={GameScreen}/>\r\n          <Route path=\"/about\" component={AboutScreen}/>\r\n          <Route path=\"/tutorial\" component={TutorialScreen}/>\r\n          <Route path=\"/game\" component={GameScreen}/>\r\n          <Route path=\"/connectionLost\" component={ConnectionLost}/>\r\n          <Route path=\"/settings\" component={SettingsScreen}/>\r\n          <Route path=\"/difficulty\" component={DifficultyScreen}/>\r\n      </Router>\r\n    );\r\n    \r\n}\r\n\r\n\r\nexport default Routes; \r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\nimport Routes from './Routes';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './styles/main.scss';\r\nimport 'react-rangeslider/lib/index.css'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst store = createStore(\r\n    reducers, {}, \r\n    composeWithDevTools (\r\n        applyMiddleware(ReduxThunk)\r\n    )\r\n);\r\n\r\nrender(\r\n    <Provider store={store}>\r\n        <Routes />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// Service worker\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}